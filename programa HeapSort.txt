#include <iostream>
using namespace std;

// Función para intercambiar dos elementos en el arreglo
void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

// Función para reorganizar el árbol y asegurar la propiedad de heap
// Se asume que los subárboles izquierdo y derecho son heaps válidos.
void heapify(int arr[], int n, int i) {
    int largest = i;        // Inicialmente, el nodo más grande es el padre
    int left = 2 * i + 1;   // Índice del hijo izquierdo
    int right = 2 * i + 2;  // Índice del hijo derecho

    // Comprobar si el hijo izquierdo es más grande que el padre
    if (left < n && arr[left] > arr[largest])
        largest = left;

    // Comprobar si el hijo derecho es más grande que el padre
    if (right < n && arr[right] > arr[largest])
        largest = right;

    // Si el nodo más grande no es el padre, intercambiarlos y volver a organizar
    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

// Función principal de heapsort
void heapSort(int arr[], int n) {
    // Construir el heap (reorganizar el arreglo)
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    // Extraer elementos uno por uno del heap
    for (int i = n - 1; i >= 0; i--) {
        // Mover la raíz actual al final del arreglo
        swap(arr[0], arr[i]);

        // Llamar a heapify en el subárbol reducido
        heapify(arr, i, 0);
    }
}

int main() {
    const int size = 6;
    int arr[size];

    // Solicitar al usuario ingresar los elementos del arreglo
    cout << "Ingresa " << size << " elementos a ordenar: ";
    for (int i = 0; i < size; i++)
        cin >> arr[i];

    // Llamar a heapsort para ordenar el arreglo
    heapSort(arr, size);

    // Mostrar el arreglo ordenado
    cout << "Arreglo ordenado: ";
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";

    cout << endl;
    return 0;
}
